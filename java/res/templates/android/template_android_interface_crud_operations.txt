package ${CRUD_OPERATIONS_INTERFACE_PACKAGE};

import java.util.Arrays;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import android.util.Log;

/**
* DatabaseCRUDOperations
*
* Provides an abstract layer of crud operations that each CRUD Class should do
*
* This source code is auto-generated
* Victor Mwenda
* @author vmwenda.vm@gmail.com
**/
public abstract class DatabaseCRUDOperations {

    private Context context;

    /**
     * Database crud operation
     * Provides method for performing crud operations
     *
     * @param context
     */
    public DatabaseCRUDOperations(Context context) {
        this.context = context;
    }

    /**
     * Get the associated context
     *
     * @return context
     */
    public Context getContext() {
        return context;
    }

    /**
     * Return the uri of the table
     *
     * @return uri
     */
    public abstract Uri getUri();

    /**
     * Insert the content values
     *
     * @param values to insert
     * @return uri of inserted row
     */
    public abstract Uri insert(ContentValues values);

    /**
     * Bulk inserts rows in a relation
     *
     * @param contentValues values to insert
     * @return
     */
    public abstract int bulkInsert(ContentValues[] contentValues);

    /**
     * Query a table
     *
     * @param projection
     * @param selection
     * @param selectionArgs
     * @param sortOrder
     * @return cursor
     */
    public abstract Cursor query(String[] projection, String selection, String[] selectionArgs, String sortOrder);

    /**
     * Updates table columns and rows
     *
     * @param values
     * @param selection
     * @param selectionArgs
     * @return number of updated rows
     */
    public abstract int update(ContentValues values, String selection, String[] selectionArgs);

    /**
     * Deletes rows
     *
     * @param selection
     * @param selectionArgs
     * @return deleted rows
     */
    public abstract int delete(String selection, String[] selectionArgs);


    /**
     * Truncates the table
     *
     * @param uri to truncate
     * @return deletedRows
     */
    public int truncateTable(Uri uri) {
        return getContext().getContentResolver().delete(uri, null, null);
    }

    /**
     * Check if this row exists in a uri
     *
     * @param uri
     * @param columns
     * @param columnValues
     * @return exists
     */
    public boolean isExists(Uri uri, String[] columns, String[] columnValues) {

        String where = null;

        if (columns.length != columnValues.length) {
            throw new IllegalArgumentException("Missing values for Columns " + Arrays.deepToString(columns) + ", You provided " + Arrays.deepToString(columnValues));
        }

        if (columns.length == columnValues.length) {

            for (int i = 0; i < columns.length; i++) {
                if (i == 0) {
                    where = "";
                }
                where += columns[i] + "='" + columnValues[i] + "' ";
                if (i < columns.length - 1) {
                    where += " AND ";
                }
            }
        }

        Log.i("WHERE_CLAUSE", "isExists(" + where + ")");

        Cursor cursor = getContext().getContentResolver().query(uri, null, where, null, null);

        boolean isExists = false;

        if (cursor != null) {
            isExists = cursor.getCount() > 0;
            cursor.close();
        }

        return isExists;
    }

    /**
     * Return the value of the specified column after executing the generated query of the columnValues and the tableColumns
     *
     * @param uri
     * @param columnValues
     * @param tableColumns
     * @param targetColumn
     * @return
     */
    public String getColumnsValues(Uri uri, String[] columnValues, String[] tableColumns, String targetColumn) {
        String where = null;
        if (columnValues.length == 0 && tableColumns.length == 0) {
            where = null;
        } else {
            where = "";
            if (columnValues.length != tableColumns.length) {
                throw new IllegalArgumentException("Missing params for Columns " + Arrays.deepToString(tableColumns) + ", You provided " + Arrays.deepToString(columnValues));
            }

            if (columnValues.length == tableColumns.length) {
                for (int i = 0; i < tableColumns.length; i++) {
                    where += tableColumns[i] + "='" + columnValues[i] + "' ";
                    if (i < (columnValues.length - 1)) {
                        where += " AND ";
                    }
                }
            }
        }

        Log.i("WHERE_CLAUSE", "getColumnsValues(" + where + ")");

        Cursor cursor = getContext().getContentResolver().query(uri, null, where, null, null);

        if (cursor != null && cursor.getCount() > 0) {
            String foundValue = null;
            for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {

                foundValue = cursor.getString(cursor.getColumnIndex(targetColumn));
            }
            if (cursor != null) cursor.close();
            return foundValue;
        }
        if (cursor != null) cursor.close();
        return null;
    }
}
