package $PACKAGE_NAME;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;

import java.util.ArrayList;
import java.util.List;

import $DATABASE_TABLES_CLASS;

import $TABLE_MODEL_CLASS;

 public class $DATABASE_TABLE_CLASS extends DatabaseCRUDOperations {

		private Context context;
		
		public $DATABASE_TABLE_CLASS(Context context){
			super(context);
			this.context = context ;
		}
        @Override
        public Context getContext() {
            return context;
        }

		/**
		* Return the Uri for this relation
		* This URI is used for doing CRUD Operations
		*/
        @Override
        public Uri getUri() {
            return $TABLE_DEFINITION_LINK.CONTENT_URI;
        }

		/**
        * $DATABASE_TABLE_CLASS#insert$DATABASE_TABLE_CLASS($TABLE_MODEL_INFO_CLASS.$TABLE_MODEL_OBJECT)
        * Mines data from $TABLE_MODEL_OBJECT, an object of $TABLE_MODEL_INFO_CLASS and inserts the data 
        * as a new row in the table -> $TABLE_DEFINITION_LINK
        *
        * @return Uri of the inserted item
        */
        @Override
        public Uri insert(ContentValues values) {
          return  getContext().getContentResolver().insert(getUri(), values);
        }

        @Override
        public Cursor query(String[] projection, String selection, String[] selectionArgs, String sortOrder) {
            return getContext().getContentResolver().query(getUri(), projection, selection, selectionArgs, sortOrder);
        }

		/**
        * $DATABASE_TABLE_CLASS#update$DATABASE_TABLE_CLASS($TABLE_MODEL_INFO_CLASS.$TABLE_MODEL_OBJECT)
        * Mines data from $TABLE_MODEL_OBJECT, an object of $TABLE_MODEL_INFO_CLASS and updates the data 
        * in the table -> $TABLE_DEFINITION_LINK if the selection matches
        *
        * @return the number of updated rows
        */
        @Override
        public int update(ContentValues values, String selection, String[] selectionArgs) {
            return getContext().getContentResolver().update(getUri(), values, selection, selectionArgs);
        }

		/**
        * $DATABASE_TABLE_CLASS#delete$DATABASE_TABLE_CLASS
        * uses the selection and deletes the data in the table -> $TABLE_DEFINITION_LINK
        * if the selection matches
        *
        * @return the number of deleted rows
        */
        @Override
        public int delete(String selection, String[] selectionArgs) {
            return getContext().getContentResolver().delete(getUri(), selection, selectionArgs);
        }

		/**
        * $DATABASE_TABLE_CLASS#insert$DATABASE_TABLE_CLASS($TABLE_MODEL_INFO_CLASS.$TABLE_MODEL_OBJECT)
        * Mines data from $TABLE_MODEL_OBJECT, an object of $TABLE_MODEL_INFO_CLASS and inserts the data 
        * as a new row in the table -> $TABLE_DEFINITION_LINK
        *
        * @return Uri of the inserted item
        */
        public Uri insert$DATABASE_TABLE_CLASS($TABLE_MODEL_INFO_CLASS $TABLE_MODEL_OBJECT) {

            ContentValues values = new ContentValues();
            
            $CONTENT_VALUES_PUT_STATEMENTS
            
            return insert(values);
        }
        
       /**
        * $DATABASE_TABLE_CLASS#update$DATABASE_TABLE_CLASS($TABLE_MODEL_INFO_CLASS.$TABLE_MODEL_OBJECT)
        * Mines data from $TABLE_MODEL_OBJECT, an object of $TABLE_MODEL_INFO_CLASS and updates the data 
        * in the table -> $TABLE_DEFINITION_LINK if the selection matches
        *
        * @return the number of updated rows
        */
 		public int update$DATABASE_TABLE_CLASS($TABLE_MODEL_INFO_CLASS $TABLE_MODEL_OBJECT, String selection, String[] selectionArgs) {

            ContentValues values = new ContentValues();
            
            $CONTENT_VALUES_PUT_STATEMENTS
            
            return update(values,selection,selectionArgs);
        }
        
        /**
        * $DATABASE_TABLE_CLASS#delete$DATABASE_TABLE_CLASS
        * uses the selection and deletes the data in the table -> $TABLE_DEFINITION_LINK
        * if the selection matches
        *
        * @return the number of deleted rows
        */
        public int delete$DATABASE_TABLE_CLASS(String selection, String[] selectionArgs) {

            return delete(selection,selectionArgs);
        }
        
        /**
        * $DATABASE_TABLE_CLASS#query$DATABASE_TABLE_CLASS
        * uses the selection projection,  selection,  selectionArgs,  sortOrder
        * to query  the data in the table -> $TABLE_DEFINITION_LINK
        * 
        * @return an iteratable Cursor object of the table -> $TABLE_DEFINITION_LINK
        */
        public Cursor query$DATABASE_TABLE_CLASS(String[] projection, String selection, String[] selectionArgs, String sortOrder) {
            return query(projection,  selection,  selectionArgs,  sortOrder);
        }
        
        /**
        * $DATABASE_TABLE_CLASS#get$TABLE_MODEL_INFO_CLASSAll
        * Returns a list of all the items in the table
        *
        * @return List<$TABLE_MODEL_INFO_CLASS>
        */
        public List<$TABLE_MODEL_INFO_CLASS> get$TABLE_MODEL_INFO_CLASSAll() {
        	
        	Cursor cursor = query$DATABASE_TABLE_CLASS(null,null,null,null);
        	
        	int rowsCount = 0;
        	
        	if(cursor!= null){
        		rowsCount = cursor.getCount();
        	}
			
			List<$TABLE_MODEL_INFO_CLASS>$TABLE_MODEL_OBJECT = new ArrayList<$TABLE_MODEL_INFO_CLASS>(rowsCount);
			
			//if cursor does not have any items
			if(rowsCount<1){
				return $TABLE_MODEL_OBJECT;
			}
            
            for(cursor.moveToFirst();!cursor.isAfterLast();cursor.moveToNext()){
            
            	$CURSOR_ITEMS_GETTER_METHODS
            	
            	$TABLE_MODEL_OBJECT.add(new $TABLE_INFO_CLASS($CONTRUCTOR_PARAMS));
            }
            
            //Close cursor
            if(cursor!= null){
        		if(!cursor.isClosed()){
        			cursor.close();
        		}
        	}
        	
            return $TABLE_MODEL_OBJECT;
        }
        
        /**
        * $DATABASE_TABLE_CLASS#search$TABLE_MODEL_INFO_CLASS
        * Returns a list of all the items in the table that match the query
        *
        * @return List<$TABLE_MODEL_INFO_CLASS>
        */
        public List<$TABLE_MODEL_INFO_CLASS> search$TABLE_MODEL_INFO_CLASS(String searchKey) {
        	
        	String selection = $ANDROID_SQL_SEARCH_SELECTION_STATEMENT;
        	
        	Cursor cursor = query$DATABASE_TABLE_CLASS(null,selection,null,null);
        	
        	int rowsCount = 0;
        	
        	if(cursor!= null){
        		rowsCount = cursor.getCount();
        	}
			
			List<$TABLE_MODEL_INFO_CLASS>$TABLE_MODEL_OBJECT = new ArrayList<$TABLE_MODEL_INFO_CLASS>(rowsCount);
			
			//if cursor does not have any items
			if(rowsCount<1){
				return $TABLE_MODEL_OBJECT;
			}
            
            for(cursor.moveToFirst();!cursor.isAfterLast();cursor.moveToNext()){
            
            	$CURSOR_ITEMS_GETTER_METHODS
            	
            	$TABLE_MODEL_OBJECT.add(new $TABLE_INFO_CLASS($CONTRUCTOR_PARAMS));
            }
            
            //Close cursor
            if(cursor!= null){
        		if(!cursor.isClosed()){
        			cursor.close();
        		}
        	}
        	
            return $TABLE_MODEL_OBJECT;
        }
                
        /**
        * $DATABASE_TABLE_CLASS#get$TABLE_MODEL_INFO_CLASS
        * Returns an object of queried row in the table
        *
        * @return $TABLE_MODEL_INFO_CLASS
        */
        public $TABLE_MODEL_INFO_CLASS get$TABLE_MODEL_INFO_CLASS($PRIMARY_KEY_DATATYPE _$PRIMARY_KEY_OBJECT) {
        	
        	String selection = $COLUMN_REFERENCE +"='" +String.valueOf(_$PRIMARY_KEY_OBJECT) +"'";
        	
        	Cursor cursor = query$DATABASE_TABLE_CLASS(null,selection,null,null);
        	
        	int rowsCount = 0;
        	
        	if(cursor!= null){
        		rowsCount = cursor.getCount();
        	}
			
			$TABLE_MODEL_INFO_CLASS $TABLE_MODEL_OBJECT =  null;
			
			//if cursor does not have any items
			if(rowsCount<1){
				return $TABLE_MODEL_OBJECT;
			}
            
            for(cursor.moveToFirst();!cursor.isAfterLast();cursor.moveToNext()){
            
            	$CURSOR_ITEMS_GETTER_METHODS
            	
            	$TABLE_MODEL_OBJECT = new $TABLE_INFO_CLASS($CONTRUCTOR_PARAMS);
            }
            
             //Close cursor
            if(cursor!= null){
        		if(!cursor.isClosed()){
        			cursor.close();
        		}
        	}
        	
            return $TABLE_MODEL_OBJECT;
        }
        
        $COLUMN_SPECIFIC_QUERY_METHODS
    }
