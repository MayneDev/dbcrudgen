package ${PACKAGE_NAME};

import android.content.ContentProvider;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import android.util.Log;

import ${SQLITE_OPENHELPER_CLASS};
import ${DATABASE_TABLES_CLASS};


public class ${CONTENT_PROVIDER_CLASS} extends ContentProvider {

    public static final String AUTHORITY = "${PACKAGE_NAME}.${CONTENT_PROVIDER_CLASS}";

    private static final UriMatcher uriMatcher;

    ${URI_MATCHER_CODES}

    private static final String DATABASE_NAME = "${DATABASE_NAME}";

    private static final int DATABASE_VERSION = ${DATABASE_VERSION};

    static {
        
        uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);

        ${INIT_URI_MATCHES}
    }

    private ${SQLITE_OPEN_HELPER_SUBCLASS} ${SQLITE_OPEN_HELPER_SUBCLASS_DATA_TYPE_VARIABLE};
    
    private SQLiteDatabase sqLiteDatabase;

    
    @Override
    public boolean onCreate() {
        
        ${SQLITE_OPEN_HELPER_SUBCLASS_DATA_TYPE_VARIABLE} = new ${SQLITE_OPEN_HELPER_SUBCLASS}(getContext(), DATABASE_NAME, null, DATABASE_VERSION);
        
        return  ${SQLITE_OPEN_HELPER_SUBCLASS_DATA_TYPE_VARIABLE} != null;
    }

    
    @Override
    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
        
        sqLiteDatabase = get${SQLITE_OPEN_HELPER_SUBCLASS_DATA_TYPE_VARIABLE}().getReadableDatabase();

		Log.i("QUERY",uri.toString());
        
        switch (uriMatcher.match(uri)) {
        
         	${TABLES_ROWS_QUERY_STATEMENTS}
              
        }
        return null;
    }

    
    @Override
    public String getType(Uri uri) {
        sqLiteDatabase = get${SQLITE_OPEN_HELPER_SUBCLASS_DATA_TYPE_VARIABLE}().getReadableDatabase();
        return null;
    }

   
    @Override
    public Uri insert(Uri uri, ContentValues values) {
        
        sqLiteDatabase = get${SQLITE_OPEN_HELPER_SUBCLASS_DATA_TYPE_VARIABLE}().getWritableDatabase();
        
        Log.i("INSERT",uri.toString());
        
        switch (uriMatcher.match(uri)) {
            
            ${TABLES_ROWS_INSERT_STATEMENTS}
            
        }
        return uri;
    }

    
    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        
        sqLiteDatabase = get${SQLITE_OPEN_HELPER_SUBCLASS_DATA_TYPE_VARIABLE}().getWritableDatabase();
        
        Log.i("DELETE",uri.toString());
        
        switch (uriMatcher.match(uri)) {
            
            ${TABLES_ROWS_DELETE_STATEMENTS}
        }
        return 0;
    }

    
    @Override
    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
        
        sqLiteDatabase = get${SQLITE_OPEN_HELPER_SUBCLASS_DATA_TYPE_VARIABLE}().getWritableDatabase();
        
        Log.i("UPDATE",uri.toString());
        
        switch (uriMatcher.match(uri)) {
            
           ${TABLES_ROWS_UPDATE_STATEMENTS}
            
        }
        return 0;
    }

    public ${SQLITE_OPEN_HELPER_SUBCLASS} get${SQLITE_OPEN_HELPER_SUBCLASS_DATA_TYPE_VARIABLE}() {
        return ${SQLITE_OPEN_HELPER_SUBCLASS_DATA_TYPE_VARIABLE};
    }

    public SQLiteDatabase getSqLiteDatabase() {
        return sqLiteDatabase;
    }
}
